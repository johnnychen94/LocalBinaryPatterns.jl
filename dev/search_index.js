var documenterSearchIndex = {"docs":
[{"location":"reference/#API-References","page":"API References","title":"API References","text":"","category":"section"},{"location":"reference/","page":"API References","title":"API References","text":"Modules = [LocalBinaryPatterns]","category":"page"},{"location":"reference/#LocalBinaryPatterns.lbp_original-Tuple{AbstractArray}","page":"API References","title":"LocalBinaryPatterns.lbp_original","text":"lbp_original(X; kwargs...)\nlbp_original(X, npoints, radius, interpolation=Linear(); kwargs...)\nlbp_original!(out, X, offsets; kwargs...)\n\nCompute the local binary pattern, the original version, of gray image X using 3x3 neighborhood matrix.\n\nArguments\n\nX::AbstractMatrix: the input image matrix. For colorful images, one can manually convert it to some monochrome space, e.g., Gray or the L-channel of Lab.\n\n[2,4] proposes a generalized interpolation-based version using circular neighborhood matrix, it produces better result for rotation=true case but is usually much slower than the plain 3x3 matrix version. The arguments for this version are:\n\nnpoints::Int(4 ≤ npoints ≤ 8): the number of (uniform-spaced) neighborhood points.\nradius::Real(radius ≥ 1.0): the radius of the circular.\ninterpolation::Union{Degree, InterpolationType}=Linear(): the interpolation method used to generate non-grid pixel value. In most cases, Linear() are good enough. One can also try other costly interpolation methods, e.g., Cubic(Line(OnGrid()))(also known as \"bicubic\"), Lanczos(). See also Interpolations.jl for more choices.\n\nnote: neighborhood order differences\nDifferent implementation might use different neighborhood orders； this will change the encoding result but will not change the overall distribution. For instance, lbp_original(X) differs from lbp_original(X, 8, 1, Constant()) only by how offsets (see below) are ordered; the former uses column-major top-left to bottom-right 3x3 matrix order and the latter uses circular order.\n\nArguments for in-place version:\n\noffsets::Tuple: tuple of neighborhood matrix, e.g., ((0, 1), (0, -1), (1, 0), (-1, 0)) specifies the 4-neighborhood matrix. If X isa Interpolations.AbstractInterpolation holds, then the position values can be float numbers, e.g, (0.7, 0.7).\n\nParameters\n\nThe parameters control whether and what degree additional encoding passses are used to compute more patterns that are more robust/invariant to certain changes, e.g., rotation. The following lists are ordered as encoding order. For example, if rotation=true and uniform_degree=2, then rotation encoding will be applied first.\n\nrotation=false: set true to generate patterns that are invariant to rotation [3]. For example, pattern 0b00001101 is equivalent to 0b01000011 when rotation=true.\nuniform_degree: the threshold number of pattern uniform degree. From [2] a typical choice is 2.If it is nothing(default value) then no uniform encoding is applied.\n\nExamples\n\njulia> X = [6 7 9; 5 6 3; 2 1 7]\n3×3 Matrix{Int64}:\n 6  7  9\n 5  6  3\n 2  1  7\n\njulia> lbp_original(X)\n3×3 Matrix{UInt8}:\n 0xc0  0x40  0x00\n 0x68  0xa9  0x1b\n 0x28  0x6b  0x00\n\njulia> lbp_original(X, 4, 1) # 4-neighbor with circular radius 1\n3×3 Matrix{UInt8}:\n 0x01  0x01  0x00\n 0x03  0x02  0x0e\n 0x02  0x07  0x00\n\njulia> lbp_original(X; rotation=true)\n3×3 Matrix{UInt8}:\n 0x03  0x01  0x00\n 0x0d  0x35  0x1b\n 0x05  0x5b  0x00\n\njulia> lbp_original(X; uniform_degree=2)\n3×3 Matrix{UInt8}:\n 0xc0  0x40  0x00\n 0x09  0x09  0x09\n 0x09  0x09  0x00\n\nExtended help\n\nLocal binary pattern\n\nThe following is how local binary pattern is calculated, the original version[1]:\n\n3x3 block     center-thresholded     weights         multiplied by weights      sum\n6  7  9         1  1  1              1  8  32          1   8  32\n5  6  3  ==>    0  x  0     ==>      2  x  64  ==>     0   x  0            ==>  169\n2  1  7         1  0  1              4  16 128         0   0  128\n\nAny binary pattern of length 8, i.e., the center-thresholded result, can be uniquely represented as an UInt8 value; the weighted sum is the encoding process.\n\nRotation-invariant encoding\n\nThe rotation-invariant encoding is to map all elements in the bitrotation equivalent class to the minimal value of this class. For example, 0b11010000 and 0b01000011 belongs to the same class because bitrotate(0b01000011, -2) == 0b11010000, thus both values are mapped to 0b00001101. See also Eq.(8) in [2].\n\nFor 3x3 neighborhood matrix, applying rotation-invariant encoding decreases the possible number of binary patterns from 256 to 36.\n\nThe interpolation-based version provides more robust result for rotation-invariant pattern, see [2,4] for more details.\n\nUniform encoding\n\nAuthors of [2] states that certain local binary patterns are fundamental properties of texture, providing the vast majority, sometimes over 90 percent, of all 3x3 patterns. Those patterns are called \"uniform\" as they contain very few spatial transitions. Uniform degree is an additional encoding pass that controls at what circumstances can we set the block to miscellaneous class.\n\nFor example, if uniform_degree=2, then 0b00001101 will be encoded as 9 (type miscellaneous) because it has 3 bit transitions, and 0b00001100 will be unchanged because it only has 2 bit transitions.\n\nReferences\n\n[1] T. Ojala, M. Pietikäinen, and D. Harwood, “A comparative study of texture measures with classification based on featured distributions,” Pattern Recognition, vol. 29, no. 1, pp. 51–59, Jan. 1996, doi: 10.1016/0031-3203(95)00067-4.\n[2] T. Ojala, M. Pietikäinen, and T. Mäenpää, “A Generalized Local Binary Pattern Operator for Multiresolution Gray Scale and Rotation Invariant Texture Classification,” in Advances in Pattern Recognition — ICAPR 2001, vol. 2013, S. Singh, N. Murshed, and W. Kropatsch, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2001, pp. 399–408. doi: 10.1007/3-540-44732-6_41.\n[3] Pietikäinen, Matti, Timo Ojala, and Zelin Xu. \"Rotation-invariant texture classification using feature distributions.\" Pattern recognition 33.1 (2000): 43-52.\n[4] T. Ojala, M. Pietikainen, and T. Maenpaa, “Multiresolution gray-scale and rotation invariant texture classification with local binary patterns,” IEEE Trans. Pattern Anal. Machine Intell., vol. 24, no. 7, pp. 971–987, Jul. 2002, doi: 10.1109/TPAMI.2002.1017623.\n\n\n\n\n\n","category":"method"},{"location":"#LocalBinaryPatterns","page":"Home","title":"LocalBinaryPatterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LocalBinaryPatterns.","category":"page"}]
}
